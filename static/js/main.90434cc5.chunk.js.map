{"version":3,"sources":["components/RepeatComponent/RepeatComponent.tsx","components/RepeatComponent/index.js","components/Line/index.js","components/Line/Line.tsx","lib/getFileFromEvent.ts","lib/getFeaturesFromFile.ts","lib/getObjectWithArraysPerFeature.ts","App.tsx","serviceWorker.js","index.js"],"names":["RepeatComponent","children","initialN","controllable","useState","n","setN","handleClick","adjustment","Array","fill","map","onClick","Line","signal","label","zoom","setZoom","scrollRef","useRef","useEffect","scrollEl","current","addEventListener","stopScroll","removeEventListener","x","e","preventDefault","points","array","maxVal","Math","max","apply","val","normalize","reduce","value","index","previous","length","ref","onWheel","event","deltaY","preserveAspectRatio","viewBox","style","height","width","id","x1","x2","y1","y2","offset","stopColor","stopOpacity","y","stroke","getFileFromEvent","a","target","files","Error","getFeaturesFromFile","file","features","extractionParams","extractFeature","audioBlob","audioFeatures","getObjectWithArraysPerFeature","featuresForSignal","returnedFeatures","Object","keys","newSignals","fromEntries","key","i","featureForFrame","entries","forEach","name","push","total","first","EXTRACTION_PARAMETERS","channels","bufferSize","hopSize","getFormattedFeaturesFromEvent","then","App","signals","updateSignal","className","onChange","type","accept","feature","maxWidth","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.90434cc5.chunk.js","sourcesContent":["import React, {useState, ReactNode}  from 'react';\n\ntype RepeatComponentPropTypes = {\n  children: ReactNode,\n  initialN: number,\n  controllable: boolean\n}\n\nfunction RepeatComponent({children, initialN, controllable}: RepeatComponentPropTypes) {\n  const [n, setN] = useState(initialN);\n\n  function handleClick(adjustment: number) {\n    if (controllable) {\n      setN(n+adjustment);\n    }\n  }\n\n  return (<>{\n    Array(n).fill(0).map(() => (<>{children}</>))\n  }{\n    controllable && <>\n      <button onClick={() => handleClick(1)}>More</button>\n      <button onClick={() => handleClick(-1)}>Less</button>\n    </>\n  }</>);\n}\n\nexport default RepeatComponent;\n","import RepeatComponent from './RepeatComponent';\nexport default RepeatComponent;","import { Line } from './Line';\nexport default Line;","import React, {useState, useEffect, useRef} from 'react';\nimport CSS from 'csstype';\n\nfunction normalize(array: number[]) {\n  const maxVal = Math.max.apply(null,array);\n  return array.map(val => val / maxVal);\n}\n\ntype LineProps = {\n  signal: number[],\n  label: string,\n  style: CSS.Properties\n}\n\n/**\n * Render a signal in a zoomable SVG\n * @param options.signal An ArrayLike of numbers\n * @param options.label A string to be shown as a label of the signal\n */\nexport function Line({signal, label}: LineProps) {\n  const height = 150;\n  let [zoom, setZoom] = useState(0);\n\n  const scrollRef = useRef(null as (SVGSVGElement | null));\n  useEffect(() => {\n    const scrollEl = scrollRef?.current;\n    scrollEl?.addEventListener('wheel', stopScroll);\n    return () => scrollEl?.removeEventListener('wheel', stopScroll);\n  }, [])\n  const stopScroll = (e: Event) => e.preventDefault()\n\n  function handleScroll(event: React.WheelEvent) {\n    event.preventDefault();\n    setZoom(zoom - event.deltaY);\n  }\n\n  const points = normalize(signal)\n    .reduce(({points, previous}, value, index) => ({\n      \"points\": points + `${index},${height - height * (value + previous) / 2} `,\n      \"previous\": value\n    }), {\n      \"points\": `0,${height} `,\n      \"previous\": 0\n    }).points + `${signal.length},${height}`;\n\n  return (\n    <svg\n      ref={scrollRef}\n      onWheel={handleScroll}\n      preserveAspectRatio=\"none\"\n      viewBox={`${(x => x > 0 ? x : 0)(zoom)} 0 ${signal.length - (x => x > 0 ? x : 0)(2*zoom)} ${height}`}\n      style={{height, width: \"100%\"}}\n      >\n      <defs>\n        <linearGradient id=\"Gradient1\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"1\">\n          <stop offset=\"0%\" stopColor=\"black\"></stop>\n          <stop offset=\"100%\" stopColor=\"black\" stopOpacity=\"0.2\"></stop>\n        </linearGradient>\n      </defs>\n      <text x=\"10\" y=\"20\">{label}</text>\n      <polyline\n        points={points}\n        fill=\"url(#Gradient1)\"\n        stroke=\"black\"\n      />\n    </svg>\n  )\n}\n\n","import { ChangeEvent } from 'react';\n\nexport async function getFileFromEvent(event: ChangeEvent<HTMLInputElement>) {\n  if (event.target.files?.[0]) {\n    return event.target.files[0];\n  }\n  throw new Error('File not found');\n}","import { MeydaAudioFeature } from \"meyda\";\nimport { extractFeature } from 'feature-extractor-worker';\nimport { ExtractionParams } from 'feature-extractor-worker/dist/main/feature-extractor';\n\nexport async function getFeaturesFromFile(file: Blob, features: MeydaAudioFeature[], extractionParams: ExtractionParams) {\n  return await extractFeature({\n    audioBlob: file,\n    audioFeatures: features,\n    extractionParams,\n  });\n}","import { MeydaFeaturesObject } from \"meyda\";\n\nexport function getObjectWithArraysPerFeature(featuresForSignal: Partial<MeydaFeaturesObject>[]) {\n  const mapper = (key: string): [string, number[]] => {\n    return [key, []];\n  }\n\n  const returnedFeatures = Object.keys(featuresForSignal[0])\n\n  let newSignals: { [x: string]: number[] } = Object.fromEntries(\n    returnedFeatures.map(mapper)\n  );\n\n  let isLoudnessResult = (p: any): p is { specific: Float32Array, total: number } => !!p.total;\n\n  for (let i = 0; i < featuresForSignal.length; i++) {\n    const featureForFrame = featuresForSignal[i];\n    if (featureForFrame) {\n      Object.entries(featureForFrame).forEach(([name, value]) => {\n        if (typeof value === \"number\") {\n          newSignals[name].push(value);\n        } else if (isLoudnessResult(value)) {\n          newSignals[name].push(value.total);\n        } else {\n          newSignals[name].push(0);\n        }\n      })\n    }\n  }\n\n  return newSignals;\n}","import React, { useState, ChangeEvent } from 'react';\nimport { MeydaAudioFeature } from 'meyda';\nimport RepeatComponent from './components/RepeatComponent';\nimport Line from './components/Line';\nimport { getFileFromEvent } from './lib/getFileFromEvent';\nimport { getFeaturesFromFile } from './lib/getFeaturesFromFile';\nimport { getObjectWithArraysPerFeature } from './lib/getObjectWithArraysPerFeature';\n\nfunction first(a: Array<any>) {\n  return a[0];\n}\n\nconst EXTRACTION_PARAMETERS = {\n  channels: [0],\n  bufferSize: 2048,\n  hopSize: 0,\n}\n\nasync function getFormattedFeaturesFromEvent(event: ChangeEvent<HTMLInputElement>, features: MeydaAudioFeature[]) {\n  return getFileFromEvent(event)\n      .then(file => getFeaturesFromFile(file, features, EXTRACTION_PARAMETERS))\n      .then(first)\n      .then(getObjectWithArraysPerFeature);\n}\n\nfunction App() {\n  type SignalsType = Map<MeydaAudioFeature, number[]>;\n  const [signals, updateSignal] = useState(null as SignalsType | null);\n\n  const features = ['loudness' as MeydaAudioFeature];\n\n  async function inputChangeHandler(event: ChangeEvent<HTMLInputElement>) {\n    getFormattedFeaturesFromEvent(event, features)\n      .then(newSignals => {\n        updateSignal(() => newSignals as unknown as SignalsType);\n      });\n  }\n\n  return (\n    <div className=\"App\">\n      <input onChange={inputChangeHandler} type='file' accept='audio/*' />\n      { signals &&\n        <>\n          <h1>Signal here!</h1>\n          { Object.entries(signals).map(([feature, signal]) =>\n            <>\n              <h4>{feature}</h4>\n              <Line key={feature} label={feature} style={{ maxWidth: \"1vw\" }} signal={signal} />\n            </>)\n          }\n        </>\n      }\n      <RepeatComponent controllable initialN={1}>\n        <h5>Worked!</h5>\n      </RepeatComponent>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}