{"version":3,"sources":["App.tsx","serviceWorker.js","index.js"],"names":["Line","signal","label","useState","zoom","setZoom","scrollRef","useRef","useEffect","scrollEl","current","addEventListener","stopScroll","removeEventListener","e","preventDefault","x","points","array","maxVal","Math","max","apply","map","val","normalize","reduce","value","index","previous","length","ref","onWheel","event","deltaY","preserveAspectRatio","viewBox","style","height","width","id","x1","x2","y1","y2","offset","stopColor","stopOpacity","y","fill","stroke","App","signals","updateSignal","featureInSelector","updateFeatureInSelector","selectedFeatures","className","onChange","a","async","file","target","files","extractFeature","audioBlob","audioFeatures","extractionParams","channels","bufferSize","hopSize","loudness","featuresForSignal","returnedFeatures","Object","keys","newSignals","fromEntries","key","i","featureForFrame","entries","forEach","name","push","total","type","accept","availableFeatureExtractors","feature","maxWidth","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bc3549f3.chunk.js","sourcesContent":["import React, {useRef, useEffect, useState, ChangeEvent } from 'react';\nimport { MeydaAudioFeature, MeydaFeaturesObject } from 'meyda';\nimport CSS from 'csstype';\nimport { extractFeature, availableFeatureExtractors } from 'feature-extractor-worker';\n\nfunction normalize(array: number[]) {\n  const maxVal = Math.max.apply(null,array);\n  return array.map(val => val / maxVal);\n}\n\ntype LineProps = {\n  signal: number[],\n  label: string,\n  style: CSS.Properties\n}\n\n/**\n * Render a signal in a zoomable SVG\n * @param options.signal An ArrayLike of numbers\n * @param options.label A string to be shown as a label of the signal\n */\nfunction Line({signal, label}: LineProps) {\n  const height = 150;\n  let [zoom, setZoom] = useState(0);\n\n  const scrollRef = useRef(null as (SVGSVGElement | null));\n  useEffect(() => {\n    const scrollEl = scrollRef?.current;\n    scrollEl?.addEventListener('wheel', stopScroll);\n    return () => scrollEl?.removeEventListener('wheel', stopScroll);\n  }, [])\n  const stopScroll = (e: Event) => e.preventDefault()\n\n  function handleScroll(event: React.WheelEvent) {\n    event.preventDefault();\n    setZoom(zoom - event.deltaY);\n  }\n\n  const points = normalize(signal)\n    .reduce(({points, previous}, value, index) => ({\n      \"points\": points + `${index},${height - height * (value + previous) / 2} `,\n      \"previous\": value\n    }), {\n      \"points\": `0,${height} `,\n      \"previous\": 0\n    }).points + `${signal.length},${height}`;\n\n  return (\n    <svg\n      ref={scrollRef}\n      onWheel={handleScroll}\n      preserveAspectRatio=\"none\"\n      viewBox={`${(x => x > 0 ? x : 0)(zoom)} 0 ${signal.length - (x => x > 0 ? x : 0)(2*zoom)} ${height}`}\n      style={{height, width: \"100%\"}}\n      >\n      <defs>\n        <linearGradient id=\"Gradient1\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"1\">\n          <stop offset=\"0%\" stopColor=\"black\"></stop>\n          <stop offset=\"100%\" stopColor=\"black\" stopOpacity=\"0.2\"></stop>\n        </linearGradient>\n      </defs>\n      <text x=\"10\" y=\"20\">{label}</text>\n      <polyline\n        points={points}\n        fill=\"url(#Gradient1)\"\n        stroke=\"black\"\n      />\n    </svg>\n  )\n}\n\nfunction App() {\n  type SignalsType = Map<MeydaAudioFeature, number[]>;\n  const [signals, updateSignal] = useState(null as SignalsType | null);\n\n  const [featureInSelector, updateFeatureInSelector] = useState('loudness' as MeydaAudioFeature);\n  const selectedFeatures: MeydaAudioFeature[] = [featureInSelector];\n\n  async function inputChangeHandler(event: ChangeEvent<HTMLInputElement>) {\n    const file = event.target.files?.[0];\n    if (file) {\n      const loudness: (Partial<MeydaFeaturesObject> | null)[][] = await extractFeature({\n        audioBlob: file,\n        audioFeatures: selectedFeatures,\n        extractionParams: {\n          channels: [0],\n          bufferSize: 2048,\n          hopSize: 0,\n        }\n      });\n\n      const featuresForSignal = loudness[0];\n\n      if (featuresForSignal[0]) {\n        const mapper = (key: string): [string, number[]] => {\n          return [key, []];\n        }\n\n        const returnedFeatures = Object.keys(featuresForSignal[0])\n\n        let newSignals: {[x: string]: number[]} = Object.fromEntries(\n          returnedFeatures.map(mapper)\n        );\n\n        let isLoudnessResult = (p: any): p is {specific: Float32Array, total: number} => !! p.total;\n\n        for (let i = 0; i < featuresForSignal.length; i++) {\n          const featureForFrame = featuresForSignal[i];\n          if (featureForFrame) {\n            Object.entries(featureForFrame).forEach(([name, value]) => {\n              if (typeof value === \"number\") {\n                newSignals[name].push(value);\n              } else if (isLoudnessResult(value)) {\n                newSignals[name].push(value.total);\n              } else {\n                newSignals[name].push(0);\n              }\n            })\n          }\n        }\n        updateSignal(() => newSignals as unknown as SignalsType);\n      }\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <input onChange={inputChangeHandler} type='file' accept='audio/*' />\n      <select value={featureInSelector} onChange={event => updateFeatureInSelector(event.target.value as MeydaAudioFeature)}>\n        {\n          availableFeatureExtractors.map(feature => (<option key={feature} value={feature}>{feature}</option>))\n        }\n      </select>\n      { signals &&\n        <>\n          <h1>Signal here!</h1>\n          { Object.entries(signals).map(([feature, signal]) =>\n            <Line key={feature} label={feature} style={{ maxWidth: \"1vw\" }} signal={signal} />)\n          }\n        </>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}