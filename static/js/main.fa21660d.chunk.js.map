{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Line","signal","label","useState","zoom","setZoom","scrollRef","useRef","useEffect","scrollEl","current","addEventListener","stopScroll","removeEventListener","x","e","preventDefault","points","array","maxVal","Math","max","apply","map","val","normalize","reduce","value","index","previous","length","ref","onWheel","event","deltaY","preserveAspectRatio","viewBox","style","height","width","id","x1","x2","y1","y2","offset","stopColor","stopOpacity","y","fill","stroke","App","signals","updateSignal","features","className","onChange","a","async","console","log","target","files","extractFeature","audioBlob","audioFeatures","extractionParams","channels","bufferSize","loudness","newSignals","total","acc","el","featuresAccumulator","featureName","type","accept","Object","entries","feature","key","maxWidth","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fa21660d.chunk.js","sourcesContent":["import React, {useRef, useEffect, useState} from 'react';\nimport {extractFeature} from 'feature-extractor-worker';\n\nfunction normalize(array) {\n  const maxVal = Math.max.apply(null,array);\n  return array.map(val => val / maxVal);\n}\n\nfunction Line({signal, label}) {\n  const height = 150;\n  let [zoom, setZoom] = useState(0);\n\n  const scrollRef = useRef(null)\n  useEffect(() => {\n    const scrollEl = scrollRef.current\n    scrollEl.addEventListener('wheel', stopScroll)\n    return () => scrollEl.removeEventListener('wheel', stopScroll)\n  }, [])\n  const stopScroll = e => e.preventDefault()\n\n  const points = normalize(signal)\n    .reduce(({points, previous}, value, index) => ({\n      \"points\": points + `${index},${height - height * (value + previous) / 2} `,\n      \"previous\": value\n    }), {\n      \"points\": `0,${height} `,\n      \"previous\": 0\n    }).points + `${signal.length},${height}`;\n\n  function handleScroll(event) {\n    event.preventDefault();\n    setZoom(zoom - event.deltaY);\n    return false;\n  }\n\n  return (\n    <svg\n      ref={scrollRef}\n      onWheel={handleScroll}\n      preserveAspectRatio=\"none\"\n      viewBox={`${(x => x > 0 ? x : 0)(zoom)} 0 ${signal.length - (x => x > 0 ? x : 0)(2*zoom)} ${height}`}\n      style={{height, width: \"100%\"}}\n      >\n      <defs>\n        <linearGradient id=\"Gradient1\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"1\">\n          <stop offset=\"0%\" stopColor=\"black\"></stop>\n          <stop offset=\"100%\" stopColor=\"black\" stopOpacity=\"0.2\"></stop>\n        </linearGradient>\n      </defs>\n      <text x=\"10\" y=\"20\">{label}</text>\n      <polyline\n        points={points}\n        fill=\"url(#Gradient1)\"\n        stroke=\"black\"\n      />\n    </svg>\n  )\n}\n\nfunction App() {\n  const [signals, updateSignal] = useState(null);\n\n  const features = ['loudness'];\n\n  async function inputChangeHandler(event) {\n    console.log(event.target.files[0]);\n    const loudness = await extractFeature({\n      audioBlob: event.target.files[0],\n      audioFeatures: features,\n      extractionParams: {\n        channels: [0],\n        bufferSize: 2048\n      }\n    });\n\n    console.log(loudness[0]);\n\n\n    const newSignals = loudness[0].map(e => ({loudness: e.loudness.total})).reduce((acc, el) =>\n    features.reduce((featuresAccumulator, featureName) => ({\n      ...featuresAccumulator,\n      [featureName]: [...acc[featureName], el[featureName]]\n    }), {}),\n      features.reduce((featuresAccumulator, featureName) => ({\n        ...featuresAccumulator,\n        [featureName]: []\n      }), {})\n    );\n\n    console.log(newSignals);\n    updateSignal(newSignals);\n  }\n\n  return (\n    <div className=\"App\">\n      <input onChange={inputChangeHandler} type='file' accept='audio/*' />\n      { signals &&\n        <>\n          <h1>Signal here!</h1>\n          { Object.entries(signals).map(([feature, signal]) =>\n            <Line key={feature} label={feature} style={{ maxWidth: \"1vw\" }} signal={signal} />)\n          }\n        </>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(<App />, document.getElementById('root2'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}